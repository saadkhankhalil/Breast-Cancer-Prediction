# -*- coding: utf-8 -*-
"""Breast_cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdO4F2XTp_t6-EfIRa3d44kOgw5O_XeP
"""

import numpy as np
import pandas as pd

# Load the dataset
df = pd.read_csv('data.csv')

# Drop unnecessary column
df.drop('Unnamed: 32', axis=1, inplace=True)

# Drop rows where 'diagnosis' is missing
df.dropna(subset=['diagnosis'], inplace=True)

# Encode the target variable: M = 1 (Malignant), B = 0 (Benign)
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

# Basic EDA
print(df['diagnosis'].value_counts())
print(df.isnull().sum())
print(df.duplicated().sum())
print(df.info())

# Prepare features and target
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc.fit(X_train)
X_train = sc.transform(X_train)
X_test = sc.transform(X_test)

# Train the logistic regression model
from sklearn.linear_model import LogisticRegression
lg = LogisticRegression()
lg.fit(X_train, y_train)

# Make predictions
y_pred = lg.predict(X_test)

# Show predictions
print(y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

X_train[50]

input_text =([ 6.63966343,  1.9769275 ,  0.31327591,  1.90233452,  2.05786602,
        0.0788037 ,  0.26483378,  0.86043609,  1.76809679, -0.93595811,
       -0.85350634,  0.92729216,  0.29254864,  0.81382428,  0.88628269,
       -0.49847317, -0.26285216, -0.03032279,  0.4399518 , -1.25977636,
       -0.5802499 ,  1.96523962,  1.07854631,  1.83265153,  2.01924985,
        0.22847029,  0.37042607,  0.79030033,  1.74421993, -1.00983488,
       -0.53947146])

np_df = np.asarray(input_text)
prediction = lg.predict(np_df.reshape(1,-1))

if prediction[0]==1:
  print('Cancer')
else:
  print('Not Cancer')

import pickle
pickle.dump(lg,open('model.pkl','wb'))
pickle.dump(sc, open('scaler.pkl', 'wb'))

